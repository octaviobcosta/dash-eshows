
diff --git a/app/main.py b/app/main.py
--- a/app/main.py
+++ b/app/main.py
@@ -38,7 +38,12 @@
 from .modulobase import (
-    carregar_base_eshows,
-    carregar_eshows_excluidos,
-    carregar_base2,
-    carregar_ocorrencias,
+    carregar_eshows_excluidos,
 )
+from .data_loader import (
+    get_eshows,
+    get_base2,
+    get_ocorrencias,
+)

@@
 logger.info("Carregando bases do Supabase…")
-df_eshows = carregar_base_eshows()
-df_base2 = carregar_base2()
-df_ocorrencias = carregar_ocorrencias()
+df_eshows = get_eshows()
+df_base2 = get_base2()
+df_ocorrencias = get_ocorrencias()
 logger.info("Bases carregadas com sucesso.")

diff --git a/app/utils.py b/app/utils.py
--- a/app/utils.py
+++ b/app/utils.py
@@
 from .modulobase import (
-    carregar_base_eshows,
     carregar_eshows_excluidos,
-    carregar_base2,
-    carregar_ocorrencias,
-    carregar_base_inad,
-    carregar_pessoas,
-    carregar_npsartistas
+)
+from .data_loader import (
+    get_eshows,
+    get_base2,
+    get_ocorrencias,
+    get_inad,
+    get_pessoas,
+    get_npsartistas,
 )

@@
-try:
-    df_eshows = carregar_base_eshows()
-    df_base2 = carregar_base2()
-    df_ocorrencias = carregar_ocorrencias()
-    df_inad = carregar_base_inad()
-    df_pessoas = carregar_pessoas()
-    df_npsartistas = carregar_npsartistas()
-except Exception:
-    df_eshows = df_base2 = df_ocorrencias = df_inad = df_pessoas = df_npsartistas = None
+
+df_eshows = get_eshows()
+df_base2 = get_base2()
+df_ocorrencias = get_ocorrencias()
+df_inad = get_inad()
+df_pessoas = get_pessoas()
+df_npsartistas = get_npsartistas()

diff --git a/app/modulobase.py b/app/modulobase.py
--- a/app/modulobase.py
+++ b/app/modulobase.py
@@
-def otimizar_tipos(df: pd.DataFrame) -> pd.DataFrame:
-    if df.empty:
-        return df
-
-    df2 = df.copy()
-
-    for col in df2.select_dtypes(include="int64").columns:
-        df2[col] = pd.to_numeric(df2[col], downcast="integer")
-    for col in df2.select_dtypes(include="float64").columns:
-        df2[col] = pd.to_numeric(df2[col], downcast="float")
-
-    for col in df2.select_dtypes(include="object").columns:
-        try:
-            nunq = df2[col].nunique(dropna=False)
-            if nunq and nunq / len(df2) < 0.5:
-                df2[col] = df2[col].astype("category")
-        except TypeError:
-            pass
-    return df2
+def otimizar_tipos(df: pd.DataFrame) -> pd.DataFrame:
+    if df.empty:
+        return df
+    for col in df.select_dtypes(include="int64").columns:
+        df[col] = pd.to_numeric(df[col], downcast="integer", errors="ignore")
+    for col in df.select_dtypes(include="float64").columns:
+        df[col] = pd.to_numeric(df[col], downcast="float", errors="ignore")
+    for col in df.select_dtypes(include="object").columns:
+        try:
+            nunq = df[col].nunique(dropna=False)
+            if nunq and nunq / len(df) < 0.5:
+                df[col] = df[col].astype("category")
+        except TypeError:
+            pass
+    return df

diff --git a/app/data_manager.py b/app/data_manager.py
--- a/app/data_manager.py
+++ b/app/data_manager.py
@@
 def _fetch(table: str) -> pd.DataFrame:
     if supa is None:
         return pd.DataFrame()

-    STEP, page, pages = 1000, 0, []
+    STEP, page = 1000, 0
+    result = pd.DataFrame()
     while True:
         start, end = page * STEP, (page + 1) * STEP - 1
         try:
             q = supa.table(table).select("*")
             if table.lower() == "baseeshows":
                 q = q.gte("Data", "2022-01-01")
             resp = q.range(start, end).execute()
         except APIError as err:
             logger.error("[%s] página %s: %s", table, page + 1, err.message)
             break

         data = resp.data or []
         if not data:
             break
-        pages.append(pd.DataFrame(data))
+        page_df = pd.DataFrame(data)
+        result = pd.concat([result, page_df], ignore_index=True, copy=False)
+        gc.collect()
         if len(data) < STEP:
             break
         page += 1

-    if not pages:
+    if result.empty:
         return pd.DataFrame()

-    df = pd.concat(pages, ignore_index=True)
+    df = result
     df = divide_cents(dedup(rename_columns(df, table)), table)

     for col in CENTS_MAPPING.get(table.lower(), []):
         if col in df.columns:
             df[col] = pd.to_numeric(df[col], errors="coerce").fillna(0.0)

     logger.info("[%s] baixado: %s linhas × %s col", table, *df.shape)
     return df
