#!/usr/bin/env python3
"""
Script de verifica√ß√£o pr√©-deploy
Executa todas as verifica√ß√µes necess√°rias antes de fazer push para produ√ß√£o
"""

import sys
import subprocess
import os
from pathlib import Path

def run_command(cmd):
    """Executa comando e retorna resultado"""
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)

def check_imports():
    """Verifica se todas as importa√ß√µes est√£o corretas"""
    print("üîç Verificando importa√ß√µes...")
    
    # Lista de arquivos Python principais
    py_files = list(Path("app").glob("*.py"))
    
    errors = []
    for file in py_files:
        print(f"  Verificando {file}...")
        success, stdout, stderr = run_command(f"python3 -m py_compile {file}")
        if not success:
            errors.append(f"‚ùå Erro em {file}: {stderr}")
    
    if errors:
        print("\n".join(errors))
        return False
    
    print("‚úÖ Todas as importa√ß√µes est√£o corretas")
    return True

def check_app_startup():
    """Tenta inicializar a aplica√ß√£o em modo dry-run"""
    print("\nüöÄ Verificando inicializa√ß√£o da aplica√ß√£o...")
    
    # Tenta importar o m√≥dulo principal
    try:
        import app.main
        print("‚úÖ Aplica√ß√£o pode ser importada com sucesso")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao importar aplica√ß√£o: {e}")
        return False

def check_required_files():
    """Verifica se todos os arquivos necess√°rios existem"""
    print("\nüìÅ Verificando arquivos obrigat√≥rios...")
    
    required_files = [
        "app/main.py",
        "app/auth.py",
        "app/auth_improved.py",
        "app/data_manager.py",
        "app/update_processor.py",
        "app/update_executor.py",
        "app/update_modal_improved.py",
        "assets/login.css",
        "assets/login_improved.css",
        "assets/modal_styles.css",
        "assets/custom.css",
        "requirements.txt",
        "runtime.txt",
        "render.yaml",
        ".env.example"
    ]
    
    missing = []
    for file in required_files:
        if not Path(file).exists():
            missing.append(f"‚ùå Arquivo faltando: {file}")
    
    if missing:
        print("\n".join(missing))
        return False
    
    print("‚úÖ Todos os arquivos obrigat√≥rios presentes")
    return True

def check_env_variables():
    """Verifica se as vari√°veis de ambiente necess√°rias est√£o documentadas"""
    print("\nüîê Verificando documenta√ß√£o de vari√°veis de ambiente...")
    
    env_example = Path(".env.example")
    if not env_example.exists():
        print("‚ùå Arquivo .env.example n√£o encontrado")
        return False
    
    required_vars = [
        "SUPABASE_URL",
        "SUPABASE_KEY",
        "JWT_SECRET_KEY",
        "FLASK_SECRET_KEY"
    ]
    
    content = env_example.read_text()
    missing = []
    
    for var in required_vars:
        if var not in content:
            missing.append(f"‚ùå Vari√°vel n√£o documentada: {var}")
    
    if missing:
        print("\n".join(missing))
        return False
    
    print("‚úÖ Todas as vari√°veis obrigat√≥rias documentadas")
    return True

def check_git_status():
    """Verifica status do git"""
    print("\nüìä Verificando status do Git...")
    
    # Verifica se h√° arquivos n√£o commitados
    success, stdout, stderr = run_command("git status --porcelain")
    if stdout.strip():
        print("‚ö†Ô∏è  Arquivos n√£o commitados detectados:")
        print(stdout)
        return False
    
    print("‚úÖ Todos os arquivos commitados")
    return True

def main():
    """Executa todas as verifica√ß√µes"""
    print("=" * 50)
    print("üõ°Ô∏è  VERIFICA√á√ÉO PR√â-DEPLOY")
    print("=" * 50)
    
    checks = [
        check_required_files,
        check_imports,
        check_app_startup,
        check_env_variables,
        check_git_status
    ]
    
    all_passed = True
    
    for check in checks:
        if not check():
            all_passed = False
    
    print("\n" + "=" * 50)
    
    if all_passed:
        print("‚úÖ TODAS AS VERIFICA√á√ïES PASSARAM!")
        print("üëç Pronto para deploy")
        return 0
    else:
        print("‚ùå VERIFICA√á√ïES FALHARAM!")
        print("üõë N√ÉO fa√ßa deploy at√© corrigir os problemas")
        return 1

if __name__ == "__main__":
    sys.exit(main())